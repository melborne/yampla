#!/usr/bin/env ruby
require "yampla"
require "trollop"

class OptionParser
  def self.parse!
    Trollop::options do
      version "yampla #{Yampla::VERSION} (c) 2013 kyoendo"
      banner ~<<-EOS
        Yampla is a builder to build index and each item pages from YAML data with a template engine. Liquid is used for the engine.

        Prerequisite:

            1. Provide item data with YAML format.

            2. Provide an index template and a item template.

            3. Write ruby code using yampla gem and run it.

        Usage:

              yampla [options]

        where [options] are:
        EOS

      opt :yaml, "Set data YAML file", :type => :string
      opt :index, "Set index template file", :type => :string
      opt :item, "Set item template file", :type => :string
      opt :out, "Output files", :default => 'all' # :index or :items
      opt :dir, "Output directory", :default => 'out'
    end
  end
end

opts = OptionParser.parse!
files = Dir['*']

yaml = opts[:yaml] || files.detect { |f| f.match /\w+\.(yaml|yml)$/ }
abort "YAML file not found." unless yaml

index = opts[:index] || files.detect { |f| f.match /^index_template/ }
item = opts[:item] || files.detect { |f| f.match /^item_template/ }

ya = Yampla::Build.new(yaml)

case 
when [index, item].all? && opts[:out] == 'all'
  ya.set_template(:index, index)
  ya.set_template(:items, item)
  ya.save(:index, dir:opts[:dir])
  ya.save(:items, dir:opts[:dir])
when index && %w(all index).include?(opts[:out])
  ya.set_template(:index, index)
  ya.save(:index, dir:opts[:dir])
when item && %w(all item).include?(opts[:out])
  ya.set_template(:items, item)
  ya.save(:items, dir:opts[:dir])
else
  abort "Any template file not found."
end
